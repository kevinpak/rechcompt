{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport styles from './table.module.scss';\nimport { useTable } from 'react-table';\nimport makeData from './MOCK_DATA.json';\n\nconst TableCpn = () => {\n  /*\n  *\n  */\n  const Table = ({\n    columns,\n    data\n  }) => {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow\n    } = useTable({\n      columns,\n      data\n    });\n    return /*#__PURE__*/_jsxs(\"table\", _objectSpread(_objectSpread({}, getTableProps()), {}, {\n      className: styles.tableCpn,\n      children: [/*#__PURE__*/_jsx(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsx(\"tr\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsx(\"th\", _objectSpread(_objectSpread({}, column.getHeaderProps()), {}, {\n            children: column.render('Header')\n          })))\n        })))\n      }), /*#__PURE__*/_jsx(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsx(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsx(\"td\", _objectSpread(_objectSpread({}, cell.getCellProps()), {}, {\n                children: cell.render('Cell')\n              }));\n            })\n          }));\n        })\n      }))]\n    }));\n  };\n  /*\n  * Structuration\n  */\n\n\n  const columns = [{\n    Header: 'Date',\n    accessor: 'date'\n  }, {\n    Header: 'Codes',\n    accessor: 'codes'\n  }, {\n    Header: 'Type',\n    accessor: 'type'\n  }, {\n    Header: 'Status',\n    accessor: 'status'\n  }];\n  /*\n  * DATA\n  */\n\n  const data = makeData;\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Table, {\n      columns: columns,\n      data: data\n    })\n  });\n};\n\nexport default TableCpn;","map":null,"metadata":{},"sourceType":"module"}